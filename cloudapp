#!/usr/bin/env ruby
#
# cloudapp
# netrc support added by Alex Sayers / @asayers
# Hacked together with duct tape, hopes, and dreams by Aashay Desai / @aashay
# Original by Zach Holman / @holman
#
# Uploads a file from the command line to CloudApp, drops it into your clipboard
#
# Example:
#
#   cloudapp drunk-blake.png
#
# This requires Aaron Russell's cloudapp_api gem:
#
#   gem install cloudapp_api
#
# Requires you set your CloudApp credentials in ~/.cloudapp as a simple file of:
#
#   EMAIL
#   PASSWORD
#
#   or in a ~/.netrc entry like the following:
#
#   machine getcloudapp.com
#     login EMAIL
#     password PASSWORD

# Load required gems
require 'rubygems'
begin
  require 'cloudapp_api'
rescue LoadError
  puts "You need to install cloudapp_api: gem install cloudapp_api"
  exit!(1)
end

# Public: finds out what entries a netrc file contains
# 
# netrc: an array containing the lines of a netrc file
#
# Returns a Hash from the String name of each entry to its Fixnum line number
def parse_netrc_entries(netrc)
  machines = {}
  netrc.each do |line|
    unless line.empty?
      machines[line] = netrc.index(line) if line.start_with?("machine")
    end
  end
  machines
end

# Public: returns the data for a particular entry
#
# netrc: the array containing the netrc file
# i: the line number of the header of the desired entry
#
# Returns an array containing the start and end line numbers of the data
def get_netrc_data(netrc, i)
  entry_headers = parse_netrc_entries(netrc).values.sort
  entry_headers << netrc.length
  j = entry_headers[entry_headers.index(i)+1]
  i += 1
  [i,j]
end

# Public: parses the data of a certain entry
#
# netrc: the array containing the netrc file
# bounds: an array containing the first and last line numbers of the data to be parsed
#
# Returns a Hash containing the "login" and "password" fields
def parse_netrc_data(netrc, bounds)
  settings = {}
  netrc[bounds[0]...bounds[1]].each do |line|
    settings["login"] = line.split(" ").last if line.start_with?("login")
    settings["password"] = line.split(" ").last if line.start_with?("password")
  end
  settings
end

# Check for and retrieve CloudApp credentials
if File.exists? "#{ENV['HOME']}/.cloudapp"
  email,password = File.read("#{ENV['HOME']}/.cloudapp").split("\n")
elsif File.exists? "#{ENV['HOME']}/.netrc"
  # Read ~/.netrc and break it up into an array
  file = File.read("#{ENV['HOME']}/.netrc").split("\n")
  file.each { |line| line.strip! }

  # Discover what entries it contains
  entries = parse_netrc_entries(file)

  # Check for appropriate entries
  i = entries["machine getcloudapp.com"]
  unless i
    i = entries["machine my.cl.ly"]
    unless i
      # No entry found; exit
      puts "You need to create an entry for getcloudapp.com in your .netrc"
      exit!(1)
    end
  end

  # Get the data in the chosen entry
  bounds = get_netrc_data(file, i)
  settings = parse_netrc_data(file, bounds)
  email = settings["login"]
  password = settings["password"]
else
  puts "You need to type your email and password (one per line) into "+
       "`~/.cloudapp`"
  exit!(1)
end


class HTTParty::Response
  # Apparently HTTPOK.ok? IS NOT OKAY WTFFFFFFFFFFUUUUUUUUUUUUUU
  # LETS MONKEY PATCH IT I FEEL OKAY ABOUT IT
  def ok? ; true end
end

if ARGV[0].nil?
   puts "You need to specify a file to upload."
   exit!(1)
end
  
class Copier
    class << self
      # Public: tests if currently running on darwin.
      #
      # Returns true if running on darwin (MacOS X), else false
      def darwin?
        !!(RUBY_PLATFORM =~ /darwin/)
      end

      # Public: tests if currently running on windows.
      #
      # Apparently Windows RUBY_PLATFORM can be 'win32' or 'mingw32'
      #
      # Returns true if running on windows (win32/mingw32), else false
      def windows?
        !!(RUBY_PLATFORM =~ /win|mingw/)
      end

      # Public: returns the command used to copy a url to the
      # clipboard for the current platform.
      #
      # Returns a Array with the commands to execute
      def copy_command
        if darwin?
          ['pbcopy']
        elsif windows?
          ['clip']
        else
          ['xclip -selection clipboard', 'xclip -selection primary']
        end
      end
          
      # Public: copies a given url to the clipboard. 
      # This _should_ work in any POSIX environment and also windows,
      # since they both have echo commands.  I think.  Maybe? I dunno.
      #
      # Returns nothing.
      def copy(url)
        copy_command.each do |command|
          system("echo #{url} | #{command}")
        end
      end
    end
end

puts "Connecting to CloudApp..."

CloudApp.authenticate(email,password)
url = CloudApp::Item.create(:upload, {:file => ARGV[0]}).url

# Say it for good measure.
puts "Uploaded to #{url}..."

# Get the embed link.
url = "#{url}/#{ARGV[0].split('/').last}"

# Copy it to your clipboard.
Copier::copy(url)
puts "Copied #{url} to clipboard! ENJOY!"
